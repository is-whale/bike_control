# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bike_core/remote_control_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class remote_control_msg(genpy.Message):
  _md5sum = "b54f566ba84898b7addc0e2d7cd838fb"
  _type = "bike_core/remote_control_msg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
int16[5] ch_x
uint8 s1
uint8 s2
int16 mouse_x
int16 mouse_y
int16 mouse_z
uint8 mouse_press_left
uint8 mouse_press_right
uint16 key_value
int16[2] virtual_rocker
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','ch_x','s1','s2','mouse_x','mouse_y','mouse_z','mouse_press_left','mouse_press_right','key_value','virtual_rocker']
  _slot_types = ['std_msgs/Header','int16[5]','uint8','uint8','int16','int16','int16','uint8','uint8','uint16','int16[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ch_x,s1,s2,mouse_x,mouse_y,mouse_z,mouse_press_left,mouse_press_right,key_value,virtual_rocker

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(remote_control_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ch_x is None:
        self.ch_x = [0] * 5
      if self.s1 is None:
        self.s1 = 0
      if self.s2 is None:
        self.s2 = 0
      if self.mouse_x is None:
        self.mouse_x = 0
      if self.mouse_y is None:
        self.mouse_y = 0
      if self.mouse_z is None:
        self.mouse_z = 0
      if self.mouse_press_left is None:
        self.mouse_press_left = 0
      if self.mouse_press_right is None:
        self.mouse_press_right = 0
      if self.key_value is None:
        self.key_value = 0
      if self.virtual_rocker is None:
        self.virtual_rocker = [0] * 2
    else:
      self.header = std_msgs.msg.Header()
      self.ch_x = [0] * 5
      self.s1 = 0
      self.s2 = 0
      self.mouse_x = 0
      self.mouse_y = 0
      self.mouse_z = 0
      self.mouse_press_left = 0
      self.mouse_press_right = 0
      self.key_value = 0
      self.virtual_rocker = [0] * 2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_5h().pack(*self.ch_x))
      _x = self
      buff.write(_get_struct_2B3h2BH().pack(_x.s1, _x.s2, _x.mouse_x, _x.mouse_y, _x.mouse_z, _x.mouse_press_left, _x.mouse_press_right, _x.key_value))
      buff.write(_get_struct_2h().pack(*self.virtual_rocker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 10
      self.ch_x = _get_struct_5h().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.s1, _x.s2, _x.mouse_x, _x.mouse_y, _x.mouse_z, _x.mouse_press_left, _x.mouse_press_right, _x.key_value,) = _get_struct_2B3h2BH().unpack(str[start:end])
      start = end
      end += 4
      self.virtual_rocker = _get_struct_2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.ch_x.tostring())
      _x = self
      buff.write(_get_struct_2B3h2BH().pack(_x.s1, _x.s2, _x.mouse_x, _x.mouse_y, _x.mouse_z, _x.mouse_press_left, _x.mouse_press_right, _x.key_value))
      buff.write(self.virtual_rocker.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 10
      self.ch_x = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=5)
      _x = self
      start = end
      end += 12
      (_x.s1, _x.s2, _x.mouse_x, _x.mouse_y, _x.mouse_z, _x.mouse_press_left, _x.mouse_press_right, _x.key_value,) = _get_struct_2B3h2BH().unpack(str[start:end])
      start = end
      end += 4
      self.virtual_rocker = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3h2BH = None
def _get_struct_2B3h2BH():
    global _struct_2B3h2BH
    if _struct_2B3h2BH is None:
        _struct_2B3h2BH = struct.Struct("<2B3h2BH")
    return _struct_2B3h2BH
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5h = None
def _get_struct_5h():
    global _struct_5h
    if _struct_5h is None:
        _struct_5h = struct.Struct("<5h")
    return _struct_5h
