// Generated by gencpp from file bike_core/remote_control_msg.msg
// DO NOT EDIT!


#ifndef BIKE_CORE_MESSAGE_REMOTE_CONTROL_MSG_H
#define BIKE_CORE_MESSAGE_REMOTE_CONTROL_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bike_core
{
template <class ContainerAllocator>
struct remote_control_msg_
{
  typedef remote_control_msg_<ContainerAllocator> Type;

  remote_control_msg_()
    : header()
    , ch_x()
    , s1(0)
    , s2(0)
    , mouse_x(0)
    , mouse_y(0)
    , mouse_z(0)
    , mouse_press_left(0)
    , mouse_press_right(0)
    , key_value(0)
    , virtual_rocker()  {
      ch_x.assign(0);

      virtual_rocker.assign(0);
  }
  remote_control_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ch_x()
    , s1(0)
    , s2(0)
    , mouse_x(0)
    , mouse_y(0)
    , mouse_z(0)
    , mouse_press_left(0)
    , mouse_press_right(0)
    , key_value(0)
    , virtual_rocker()  {
  (void)_alloc;
      ch_x.assign(0);

      virtual_rocker.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<int16_t, 5>  _ch_x_type;
  _ch_x_type ch_x;

   typedef uint8_t _s1_type;
  _s1_type s1;

   typedef uint8_t _s2_type;
  _s2_type s2;

   typedef int16_t _mouse_x_type;
  _mouse_x_type mouse_x;

   typedef int16_t _mouse_y_type;
  _mouse_y_type mouse_y;

   typedef int16_t _mouse_z_type;
  _mouse_z_type mouse_z;

   typedef uint8_t _mouse_press_left_type;
  _mouse_press_left_type mouse_press_left;

   typedef uint8_t _mouse_press_right_type;
  _mouse_press_right_type mouse_press_right;

   typedef uint16_t _key_value_type;
  _key_value_type key_value;

   typedef boost::array<int16_t, 2>  _virtual_rocker_type;
  _virtual_rocker_type virtual_rocker;





  typedef boost::shared_ptr< ::bike_core::remote_control_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bike_core::remote_control_msg_<ContainerAllocator> const> ConstPtr;

}; // struct remote_control_msg_

typedef ::bike_core::remote_control_msg_<std::allocator<void> > remote_control_msg;

typedef boost::shared_ptr< ::bike_core::remote_control_msg > remote_control_msgPtr;
typedef boost::shared_ptr< ::bike_core::remote_control_msg const> remote_control_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bike_core::remote_control_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bike_core::remote_control_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bike_core::remote_control_msg_<ContainerAllocator1> & lhs, const ::bike_core::remote_control_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ch_x == rhs.ch_x &&
    lhs.s1 == rhs.s1 &&
    lhs.s2 == rhs.s2 &&
    lhs.mouse_x == rhs.mouse_x &&
    lhs.mouse_y == rhs.mouse_y &&
    lhs.mouse_z == rhs.mouse_z &&
    lhs.mouse_press_left == rhs.mouse_press_left &&
    lhs.mouse_press_right == rhs.mouse_press_right &&
    lhs.key_value == rhs.key_value &&
    lhs.virtual_rocker == rhs.virtual_rocker;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bike_core::remote_control_msg_<ContainerAllocator1> & lhs, const ::bike_core::remote_control_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bike_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bike_core::remote_control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bike_core::remote_control_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bike_core::remote_control_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bike_core::remote_control_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bike_core::remote_control_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bike_core::remote_control_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bike_core::remote_control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b54f566ba84898b7addc0e2d7cd838fb";
  }

  static const char* value(const ::bike_core::remote_control_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb54f566ba84898b7ULL;
  static const uint64_t static_value2 = 0xaddc0e2d7cd838fbULL;
};

template<class ContainerAllocator>
struct DataType< ::bike_core::remote_control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bike_core/remote_control_msg";
  }

  static const char* value(const ::bike_core::remote_control_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bike_core::remote_control_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int16[5] ch_x\n"
"uint8 s1\n"
"uint8 s2\n"
"int16 mouse_x\n"
"int16 mouse_y\n"
"int16 mouse_z\n"
"uint8 mouse_press_left\n"
"uint8 mouse_press_right\n"
"uint16 key_value\n"
"int16[2] virtual_rocker\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bike_core::remote_control_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bike_core::remote_control_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ch_x);
      stream.next(m.s1);
      stream.next(m.s2);
      stream.next(m.mouse_x);
      stream.next(m.mouse_y);
      stream.next(m.mouse_z);
      stream.next(m.mouse_press_left);
      stream.next(m.mouse_press_right);
      stream.next(m.key_value);
      stream.next(m.virtual_rocker);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct remote_control_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bike_core::remote_control_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bike_core::remote_control_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ch_x[]" << std::endl;
    for (size_t i = 0; i < v.ch_x.size(); ++i)
    {
      s << indent << "  ch_x[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ch_x[i]);
    }
    s << indent << "s1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.s1);
    s << indent << "s2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.s2);
    s << indent << "mouse_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mouse_x);
    s << indent << "mouse_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mouse_y);
    s << indent << "mouse_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mouse_z);
    s << indent << "mouse_press_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mouse_press_left);
    s << indent << "mouse_press_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mouse_press_right);
    s << indent << "key_value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.key_value);
    s << indent << "virtual_rocker[]" << std::endl;
    for (size_t i = 0; i < v.virtual_rocker.size(); ++i)
    {
      s << indent << "  virtual_rocker[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.virtual_rocker[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIKE_CORE_MESSAGE_REMOTE_CONTROL_MSG_H
