// Generated by gencpp from file bike_core/odrive_motor_feedback_msg.msg
// DO NOT EDIT!


#ifndef BIKE_CORE_MESSAGE_ODRIVE_MOTOR_FEEDBACK_MSG_H
#define BIKE_CORE_MESSAGE_ODRIVE_MOTOR_FEEDBACK_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bike_core
{
template <class ContainerAllocator>
struct odrive_motor_feedback_msg_
{
  typedef odrive_motor_feedback_msg_<ContainerAllocator> Type;

  odrive_motor_feedback_msg_()
    : header()
    , can_id(0)
    , speed(0.0)
    , position(0.0)  {
    }
  odrive_motor_feedback_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , can_id(0)
    , speed(0.0)
    , position(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _can_id_type;
  _can_id_type can_id;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> const> ConstPtr;

}; // struct odrive_motor_feedback_msg_

typedef ::bike_core::odrive_motor_feedback_msg_<std::allocator<void> > odrive_motor_feedback_msg;

typedef boost::shared_ptr< ::bike_core::odrive_motor_feedback_msg > odrive_motor_feedback_msgPtr;
typedef boost::shared_ptr< ::bike_core::odrive_motor_feedback_msg const> odrive_motor_feedback_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator1> & lhs, const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.can_id == rhs.can_id &&
    lhs.speed == rhs.speed &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator1> & lhs, const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bike_core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38c3e0965abc26a062be9ceaf6afcfd0";
  }

  static const char* value(const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38c3e0965abc26a0ULL;
  static const uint64_t static_value2 = 0x62be9ceaf6afcfd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bike_core/odrive_motor_feedback_msg";
  }

  static const char* value(const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint32 can_id\n"
"float32 speed\n"
"float32 position\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.can_id);
      stream.next(m.speed);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odrive_motor_feedback_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bike_core::odrive_motor_feedback_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "can_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.can_id);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIKE_CORE_MESSAGE_ODRIVE_MOTOR_FEEDBACK_MSG_H
